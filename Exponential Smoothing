import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()


# Exponential Smoothing: only capturing intercetp
def exponential_smoothing(series, alpha):
    '''
    series: dataframe with timeseries
    alpha: float[0.0, 1.0], smoothing parameter
    '''
    result = [series[0]] # first value is same as series
    for n in range(1, len(series)):
        result.append(alpha*series[n] + (1 - alpha) * result[n-1])
    return result


def plotExponentialSmoothing(series, alphas):
    with plt.style.context('seaborn-white'):
        plt.figure(figsize=(15, 7))
        for alpha in alphas:
            result = exponential_smoothing(series, alpha)
            plt.plot(result, label='Alpha {}'.format(alpha))
        plt.plot(series.values, 'c', label='Actual')
        plt.legend(loc='best')
        plt.axis('tight')
        plt.title('Exponential Smoothing')
        plt.grid(True)


# Double Exponential Smoothing: capturing intercept and trend
def double_exponential_smoothing(series, alpha, beta):
    '''
    series: dataset with timeseries
    alpha: float [0.0, 1.0], smoothing parameter for level
    beta: float [0.0, 1.0], smoothing parameter for trend
    '''
    # first value is same as series
    result = [series[0]]
    for n in range(1, len(series)+1):
        if n == 1:
            level, trend = series[0], series[1] - series[0]
        if n >= len(series): # forecasting
            value = result[-1]
        else:
            value = series[n]
        last_level, level = level, alpha*value + (1-alpha)*(level+trend)
        trend = beta*(level-last_level) + (1-beta)*trend
        result.append(level+trend)
    return result


def plotDoubleExponentialSmoothing(series, alphas, betas):
    with plt.style.context('seaborn-white'):
        plt.figure(figsize=(20, 8))
        for alpha in alphas:
            for beta in betas:
                result = double_exponential_smoothing(series, alpha, beta)
                plt.plot(result, label='Alpha {}, beta {}'.format(alpha, beta))
        plt.plot(series.values, label='Actual')
        plt.axis('tight')
        plt.title('Double Exponential Smoothing')
        plt.legend(loc='best')
        plt.grid(True)
